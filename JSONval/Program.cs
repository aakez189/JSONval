using System;
using System.Collections.Generic;
using System.IO;


namespace JSONval
{

	using Newtonsoft.Json;
	using Newtonsoft.Json.Linq;
	using Newtonsoft.Json.Schema;


	/// <summary>
	/// TEST CLASS - generated by import via "Paste Special..."
	/// </summary>
	public class Rootobject {
		public string Schema { get; set; }
		public string Type { get; set; }
		public Properties Properties { get; set; }
		public bool AdditionalProperties { get; set; }
		public string[] Required { get; set; }
	}

	public class Properties {
		public TrainDeviceTree TrainDeviceTree { get; set; }
	}

	public class TrainDeviceTree {
		public string Type { get; set; }
		public TrainDetails Properties { get; set; }
		public bool AdditionalProperties { get; set; }
		public string[] Required { get; set; }
	}

	public class TrainDetails {
		public TrainUic TrainUIC { get; set; }
		public SiemensTrainNumber SiemensTrainNumber { get; set; }
	}

	public class TrainUic {
		public string Type { get; set; }
	}

	public class SiemensTrainNumber {
		public string Type { get; set; }
	}


	/// <summary>
	/// JsonValidator - reading and generating tests
	/// </summary>
	/// <remarks>
	/// ctor
	/// </remarks>
	/// <param name="args"></param>

	internal class JsonValidator(IReadOnlyList<string> args)
	{
		private readonly string _jsonFile = args[0];
		private readonly string _schemaFile = (args.Count > 1) ? args[1] : DummySchema;

		private const string DummySchema = @"{'$schema': 'https://json-schema.org/draft/2019-09/schema'}";

		private StreamReader streamreader = null;
		private JsonTextReader textreader = null;

		private int Age { get; set; }


		/// <summary>
		/// dtor
		/// </summary>
		~JsonValidator() {
			textreader?.Close();
		}


		/// <summary>
		/// get JSON schema
		/// </summary>
		private JSchema JsonSchema {
			get {
				if (_schemaFile.Equals(DummySchema))
					return JSchema.Parse(_schemaFile);

				using (streamreader = File.OpenText(_schemaFile))
					try {
						textreader = new JsonTextReader(streamreader) {
							CloseInput = true
						};
						
						return JSchema.Load(textreader, new JSchemaReaderSettings() {
							ValidateVersion = true,
							ResolveSchemaReferences = true
						});

						// try to generate Schema from class
						//return schema = new JSchemaGenerator().Generate(new TrainDeviceTree().GetType());
					}
					catch (JsonReaderException error) {
						Console.WriteLine(error);
						return null;
					}
			}
		}


		/// <summary>
		/// get JSON file
		/// </summary>
		private JToken JsonFile {
			get {
				using (streamreader = File.OpenText(_jsonFile))
					try {
						textreader = new (streamreader) {
							CloseInput = true
						};

						return JToken.Load(textreader, new JsonLoadSettings() {
							DuplicatePropertyNameHandling = DuplicatePropertyNameHandling.Error,
							CommentHandling = CommentHandling.Ignore,
							LineInfoHandling = LineInfoHandling.Ignore
						});
					}
					catch (JsonReaderException error) {
						Console.WriteLine(error);
						return null;
					}
			}
		}


		/// <summary>
		/// validate JSON file against JSON schema
		/// </summary>
		public bool JsonFileIsValid {
			get {
				try {
					bool valid = JsonFile.IsValid(JsonSchema, out IList<ValidationError> messages);
					Messages = messages;
					return valid;
				}
				catch (Exception error) {
					Age = 4711;
					Console.WriteLine($"{error} has some {Age}");
				}
				return false;
			}
		}


		public IList<ValidationError> Messages {
			get;
			private set;
		}
	}


	public static class Start {
		/// <summary>
		/// args[0] = .json file (mandatory)
		/// args[1] = schema file (optional)
		/// </summary>
		/// <param name="args"></param>
		private static void Main(string[] args) {
			if (args.Length == 0) {
				Console.WriteLine("No .json file available!");
			}
			else {
				JsonValidator jsonVal = new(args);
				Console.WriteLine("Validation results:");
				Console.WriteLine("Validation was {0}.", jsonVal.JsonFileIsValid.ToString().ToLower());
				Console.WriteLine(jsonVal.Messages != null ? jsonVal.Messages.ToString() : "No schema errors.");
			}
		}
	}
}